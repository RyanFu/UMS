package com.tpadsz.navigator;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import com.tp.service.nav.ButtonSourceAdapter;
import com.tpadsz.navigator.entity.Bottom;
import com.tpadsz.navigator.entity.Button;
import com.tpadsz.navigator.entity.CenterLeft;
import com.tpadsz.navigator.entity.CenterRight;
import com.tpadsz.navigator.entity.IPageArea;
import com.tpadsz.navigator.entity.Navigator;
import com.tpadsz.navigator.entity.Top;

public class NavigatorProvider {
	Node[] newsSub = null;
	Node[] shoppingSub = null;
	Node[] readingSub = null;
	Node[] bottomSub = null;
	Node[] nodes;
	Node[] topDefault;
	Node[] leftDefault;
	Node[] rightDefault;
	Node[] bottomDefault;
	Connection conn = null;
	Random rnd = new Random();

	IButtonSourceAdapter buttonClickSource;
	Long staticsTimeLimit;

	public NavigatorProvider() {
		Node n1 = new Node(1, 1, 0, "新闻", "#");
		Node n2 = new Node(2, 1, 0, "购物", "#");
		Node n3 = new Node(3, 1, 0, "阅读", "#");
		Node n4 = new Node(4, 1, 0, "出去玩", "#");
		Node n5 = new Node(5, 2, 1, "娱乐", "#");
		Node n6 = new Node(6, 2, 1, "社会", "#");
		Node n7 = new Node(7, 2, 1, "体育", "#");
		Node n8 = new Node(8, 2, 1, "数码科技", "#");
		Node n9 = new Node(9, 2, 1, "军事", "#");
		Node n10 = new Node(10, 2, 1, "汽车", "#");
		Node n11 = new Node(11, 2, 1, "财经", "#");
		Node n12 = new Node(12, 2, 2, "团购", "#");
		Node n13 = new Node(13, 2, 2, "淘宝", "#");
		Node n14 = new Node(14, 2, 2, "京东", "#");
		Node n15 = new Node(15, 2, 2, "凡客", "#");
		Node n16 = new Node(16, 2, 2, "天猫", "#");
		Node n17 = new Node(17, 2, 3, "小说", "#");
		Node n18 = new Node(18, 2, 3, "搞笑", "#");
		Node n19 = new Node(19, 2, 3, "漫画", "#");
		Node n20 = new Node(20, 2, 3, "糗事百科", "#");
		Node n21 = new Node(21, 2, 4, "天气", "#");
		Node n22 = new Node(22, 2, 4, "地图", "#");
		Node n23 = new Node(23, 2, 4, "火车时刻", "#");
		Node n24 = new Node(24, 2, 4, "公交", "#");
		Node n25 = new Node(25, 2, 0, "看电影", "#");
		Node n26 = new Node(26, 2, 0, "视频", "#");
		Node n27 = new Node(27, 2, 0, "音乐", "#");
		Node n28 = new Node(28, 2, 0, "游戏", "#");
		Node n29 = new Node(29, 2, 0, "美食", "#");
		Node n30 = new Node(30, 2, 0, "社区", "#");
		Node n31 = new Node(31, 2, 0, "微博", "#");
		Node n32 = new Node(32, 2, 0, "生活百科", "#");
		Node n33 = new Node(33, 2, 0, "星座", "#");
		Node n34 = new Node(34, 2, 0, "邮件", "#");
		Node n35 = new Node(35, 2, 0, "应用市场", "#");
		Node n36 = new Node(36, 2, 0, "More", "#");
		newsSub = new Node[] { n5, n6, n7, n8, n9, n10, n11 };
		shoppingSub = new Node[] { n12, n13, n14, n15, n16 };
		readingSub = new Node[] { n17, n18, n19, n20 };
		bottomSub = new Node[] { n21, n22, n23, n24, n25, n26, n27, n28, n29,
				n30, n31, n32, n33, n34, n35 };
		nodes = new Node[] { n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12,
				n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24,
				n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36 };
		topDefault = new Node[] { n1, n5, n7 };
		leftDefault = new Node[] { n2 };
		rightDefault = new Node[] { n3 };
		bottomDefault = new Node[] { n27, n28, n29, n30, n33, n35, n36 };

		// try {
		// Class.forName("org.hsqldb.jdbcDriver");
		// conn = DriverManager.getConnection("jdbc:hsqldb:mem:nav_db", "sa",
		// "");
		// Statement stmt = conn.createStatement();
		// stmt
		// .execute("create table click (ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,userid VARCHAR_IGNORECASE(20) NOT NULL,buttonId INTEGER NOT NULL,date BIGINT NOT NULL)");
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (ClassNotFoundException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
	}

	private void setPicture(IPageArea ret, Button btn, int position) {
		if (ret == null || btn == null || btn.getPictures() == null) {
			return;
		}
		String template = ret.getTemplate();
		if (ret instanceof Top) {
			if (template != null && template.equals("1")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("3x2"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				default:
					break;
				}
			} else if (template != null && template.equals("2")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("2x2"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				default:
					break;
				}
			} else if (template != null && template.equals("3")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("2x2"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 4:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				default:
					break;
				}
			} else if (template != null && template.equals("4")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("2x2"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 4:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 5:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				default:
					break;
				}
			}
		} else if (ret instanceof CenterLeft || ret instanceof CenterRight) {
			if (template != null && template.equals("1")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("2x2"));
					break;
				default:
					break;
				}
			} else if (template != null && template.equals("2")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				default:
					break;
				}
			} else if (template != null && template.equals("3")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				default:
					break;
				}
			} else if (template != null && template.equals("4")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 4:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 5:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				default:
					break;
				}
			}
		} else if (ret instanceof Bottom) {
			if (template != null && template.equals("1")) {
				switch (position) {
				case 1:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 2:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 3:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 4:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 5:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 6:
					btn.setPicture(btn.getPictures().get("1x1"));
					break;
				case 7:
					btn.setPicture(btn.getPictures().get("2x1"));
					break;
				default:
					break;
				}
			}
		}
	}

	private IPageArea getSuperAverageButtons(Map<Button, Integer> clicks,
			IPageArea ret, String userId) {
		ArrayList<Button> list = new ArrayList<Button>();
		Iterator<Button> it = clicks.keySet().iterator();
		ButtonClick[] bc = new ButtonClick[clicks.keySet().size()];
		int count = 0;
		int position = 1;
		while (it.hasNext()) {
			Button btn = it.next();
			bc[count++] = new ButtonClick(btn, clicks.get(btn));
		}
		Arrays.sort(bc);
		int iBcIsZero = 0;
		for (ButtonClick febc : bc) {
			System.out.println(febc.getButton().getTitle() + ":"
					+ febc.getClicks());
			if (febc.getClicks() == 0) {
				++iBcIsZero;
			}
		}

		bc = Arrays.copyOfRange(bc, 0, bc.length - iBcIsZero);
		// for(int i=0;i<bc.length/2;i++){
		// ButtonClick temp=bc[i];
		// bc[i]=bc[bc.length-1-i];
		// bc[bc.length-1-i]=temp;
		// }

		switch (bc.length) {
		case 0: {
			if (ret instanceof Top) {
				return getDefaultTop();
			} else if (ret instanceof CenterLeft) {
				return getDefaultCenterLeft();
			} else if (ret instanceof CenterRight) {
				return getDefaultCenterRight();
			} else if (ret instanceof Bottom) {
				return getDefaultBottom(userId);
			}
		}
		case 1: {
			if (ret instanceof Top) {
				return getDefaultTop();
			} else if (ret instanceof CenterLeft) {
				return getDefaultCenterLeft();
			} else if (ret instanceof CenterRight) {
				return getDefaultCenterRight();
			} else if (ret instanceof Bottom) {
				return getDefaultBottom(userId);
			}
		}
		case 2:
			// ret = new Top();
			if (bc[0].getClicks() + bc[1].getClicks() > 10) {
				ret.setTemplate("2");
			} else {
				ret.setTemplate("1");
			}
			// position = 1;
			// for (ButtonClick o : bc) {
			// setPicture(ret, o.getButton(), position++);
			// list.add(o.getButton());
			// }
			for (ButtonClick o : bc) {
				list.add(o.getButton());
			}
			ret.setButtons(list);

			break;
		case 3: {
			// ret = new Top();
			ret.setTemplate("3");
			// position = 1;
			// for (ButtonClick o : bc) {
			// setPicture(ret, o.getButton(), position++);
			// list.add(o.getButton());
			// }list.clear();
			for (ButtonClick o : bc) {
				list.add(o.getButton());
			}
			ret.setButtons(list);

		}
			break;
		case 4: {
			// ret = new Top();
			ret.setTemplate("4");
			position = 1;
			for (ButtonClick o : bc) {
				// setPicture(ret, o.getButton(), position++);
				list.add(o.getButton());
			}
			ret.setButtons(list);
		}
			break;

		default: {
			int sum = 0;
			for (ButtonClick o : bc) {
				sum += o.getClicks();
			}
			int avg = sum / bc.length;
			for (ButtonClick o : bc) {
				if (o.getClicks() < avg) {
					clicks.remove(o.getButton());
				}
			}
			// return getSuperAverageButtons(clicks, ret);
			ButtonClick[] newbc = new ButtonClick[clicks.keySet().size()];
			int c = 0;
			for (Button b : clicks.keySet()) {
				newbc[c++] = new ButtonClick(b, clicks.get(b));
			}
			Arrays.sort(newbc);
			list.clear();
			for (int i = 0; i < 4 && i < clicks.keySet().size(); i++) {
				// setPicture(ret, newbc[i].getButton(), i + 1);
				list.add(newbc[i].getButton());
			}
			if (ret instanceof Top) {
				switch (list.size()) {
				case 1:
					ret.setTemplate("2");
					// TODO If there is only one button has clicks more than
					// avg, a most recent clicked button should be add to fill
					// template "1".
					// For example, the line below will find a button most
					// recently click which is under the category "news".
					// list.add(buttonClickSource.getMostRecentButtonOfCategory(Long.toString(buttonClickSource.getNewsButton("new").getId()),Long.toString(list.get(0).getId())));
					list.add(getRandomBottom().getButtons().get(0));
					break;
				case 2:
					ret.setTemplate("3");
					break;
				case 3:
					ret.setTemplate("4");
					break;
				// case 4:
				// ret.setTemplate("3");
				// break;
				default:
					return getDefaultTop();
				}
			} else if (ret instanceof CenterRight || ret instanceof CenterLeft) {
				if (list.size() >= 1 && list.size() <= 4) {
					ret.setTemplate(Integer.toString(list.size() + 1));
					if (list.size() + 1 > 4) {
						ret.setTemplate("4");
					}
				} else {
					if (ret instanceof CenterLeft) {
						return getDefaultCenterLeft();
					} else {
						return getDefaultCenterRight();
					}
				}
			}
			ret.setButtons(list);
		}
		}
		return ret;
	}

	protected IPageArea getPreferredTop(String userId) {
		IPageArea ret = new Top();
		ret = getSuperAverageButtons(buttonClickSource.getAllNewsButtonClicks(
				userId, staticsTimeLimit), ret, userId);

		ret.getButtons().add(0,
				buttonClickSource.getNewsButton(ret.getTemplate()));

		int position = 1;
		for (Button btn : ret.getButtons()) {
			setPicture(ret, btn, position++);
		}
		return ret;
	}

	protected IPageArea getPreferredLeft(String userId) {
		IPageArea ret = new CenterLeft();
		Map<Button, Integer> clicks = null;
		if (buttonClickSource.isShoppingHotterThanTraveling(userId)) {
			clicks = buttonClickSource.getAllShoppingButtonClicks(userId,
					staticsTimeLimit);
		} else {
			clicks = buttonClickSource.getAllLifeButtonClicks(userId,
					staticsTimeLimit);
		}

		ret = getSuperAverageButtons(clicks, ret, userId);
		ret
				.getButtons()
				.add(
						0,
						buttonClickSource.isShoppingHotterThanTraveling(userId) ? buttonClickSource
								.getShoppingButton(ret.getTemplate())
								: buttonClickSource.getLifeButton(ret
										.getTemplate()));
		int position = 1;
		for (Button btn : ret.getButtons()) {
			setPicture(ret, btn, position++);
		}

		return ret;
	}

	protected IPageArea getPreferredRight(String userId) {
		IPageArea ret = new CenterRight();

		Map<Button, Integer> clicks = buttonClickSource
				.getAllReadingButtonClicks(userId, staticsTimeLimit);

		// System.err.println("-----------------" + ret.getClass().getName()
		// + "----------------------");
		// ret = getSuperAverageButtons(clicks, ret);
		// System.err.println("-----------------" + ret.getClass().getName()
		// + "----------------------");
		ret = getSuperAverageButtons(clicks, ret, userId);
		ret.getButtons().add(0,
				buttonClickSource.getReadingButton(ret.getTemplate()));
		int position = 1;
		for (Button btn : ret.getButtons()) {
			setPicture(ret, btn, position++);
		}
		return ret;
	}

	private List<ButtonClick> getButtonClicksFromMap(Map<Button, Integer> map) {
		List<ButtonClick> ret = new LinkedList<ButtonClick>();
		for (Button btn : map.keySet()) {
			ret.add(new ButtonClick(btn, map.get(btn)));
		}
		return ret;
	}

	protected Bottom getPreferredBottom(String userId) {
		Bottom ret = new Bottom();
		ret.setTemplate("1");
		boolean isShoppingHotterThanLife = buttonClickSource
				.isShoppingHotterThanTraveling(userId);
		Button first = isShoppingHotterThanLife ? buttonClickSource
				.getLifeButton("1") : buttonClickSource.getShoppingButton("1");

		List<ButtonClick> bcList = new LinkedList<ButtonClick>();
		// bcList.addAll(getButtonClicksFromMap(buttonClickSource
		// .getAllFriendsButtonClicks(userId, staticsTimeLimit)));

		Button friends = buttonClickSource.getFriendsButton("friends");
//		Button shop = buttonClickSource.getShoppingButton("shop");
//		Button life = buttonClickSource.getLifeButton("life");

		Map<Button, Integer> friendsClicks = buttonClickSource
				.getAllFriendsButtonClicks(userId, staticsTimeLimit);
//		Map<Button, Integer> shopClicks = buttonClickSource
//				.getAllShoppingButtonClicks(userId, staticsTimeLimit);
//		Map<Button, Integer> lifeClicks = buttonClickSource
//				.getAllLifeButtonClicks(userId, staticsTimeLimit);

		int friendsTotalClick = 0;
		for (Integer i : friendsClicks.values()) {
			friendsTotalClick += i;
		}

//		int shopTotalClick = 0;
//		for (Integer i : shopClicks.values()) {
//			shopTotalClick += i;
//		}
//
//		int lifeTotalClick = 0;
//		for (Integer i : lifeClicks.values()) {
//			lifeTotalClick += i;
//		}

		// Adding life/shop (depending on which one is hotter), friend, all
		// subclasses of leisure
		// to the competing list.

		// bcList.add(new ButtonClick(friends, friendsTotalClick));
		// bcList.add(isShoppingHotterThanLife ? new ButtonClick(life,
		// lifeTotalClick) : new ButtonClick(shop, shopTotalClick));
		bcList.addAll(getButtonClicksFromMap(buttonClickSource
				.getAllLeisureButtonClicks(userId, staticsTimeLimit)));

		// for (ButtonClick bc : bcList) {
		// if (isShoppingHotterThanLife) {
		// if (bc.getButton().getTitle().equals("life")) {
		// bcList.remove(bc);
		// }
		// } else {
		// if (bc.getButton().getTitle().equals("shop")) {
		// bcList.remove(bc);
		// }
		// }
		// }

		ButtonClick[] bc = new ButtonClick[bcList.size()];
		bc = bcList.toArray(bc);

		// Sort the competing list by descend order.
		Arrays.sort(bc);

		// 
		ArrayList<Button> list = new ArrayList<Button>(bc.length);
		int count = 0;
		for (ButtonClick btnClk : bc) {
			if (count++ < 2) {
				list.add(btnClk.getButton());
			} else {
				break;
			}
		}
		// ArrayList<Button> list = new ArrayList<Button>(buttonClickSource
		// .getBottom(userId, staticsTimeLimit));

		list.add(0, first);
		list.add(0, friends);

		if (list.size() < 4) {
			return getDefaultBottom(userId);
		}

		ret.setButtons(list);
		// int position = 1;
		// for (Button btn : ret.getButtons()) {
		// setPicture(ret, btn, position++);
		// }
		ret.setTemplate("1");
		for (Button btn : ret.getButtons()) {
			System.out.println(btn.getTitle());
			btn.setPicture(btn.getPictures().get("1x1"));
		}

		return ret;

	}

	protected Bottom getDefaultBottom(String userId) {
		Bottom ret = new Bottom();
		ret.setTemplate("1");
		ArrayList<Button> list = new ArrayList<Button>(5);
		// list.add(buttonClickSource.getTravelingButton("1"));
		list.addAll(buttonClickSource.getDefaultBottom(userId));
		int count = 1;
		for (Button btn : list) {
			setPicture(ret, btn, count++);
		}
		ret.setButtons(list);
		return ret;
	}

	protected Bottom getRandomBottom() {
		Bottom ret = new Bottom();
		ret.setTemplate(Integer.toString(1));
		ArrayList<Button> buttons = new ArrayList<Button>(buttonClickSource
				.getRandomBottom());

		// for (int i = 0; i < 7 - 1; i++) {
		// Node node = bottomSub[rnd.nextInt(bottomSub.length)];
		// Button btn = new Button(node.getId(), "", 2, false, "1", "1,1", "",
		// node.getTitle(), "");
		// buttons.add(btn);
		// }
		Button last = new Button(3L,
				"http://pm.tpadsz.com:8080/UMS/nav/homemore", 1, false, "1",
				"1,1", "", "More", "");
		HashMap<String, String> pictures = new HashMap<String, String>();
		pictures.put("2x1", "image.action?inputPath=");
		last.setPictures(pictures);
		buttons.add(last);
		ret.setButtons(buttons);
		int position = 1;
		for (Button btn : ret.getButtons()) {
			setPicture(ret, btn, position++);
		}
		return ret;
	}

	protected CenterRight getDefaultCenterRight() {
		CenterRight ret = new CenterRight();
		ret.setTemplate("3");
		ArrayList<Button> list = new ArrayList<Button>(3);
		// list.add(buttonClickSource.getReadingButton("3"));
		list.addAll(buttonClickSource.getDefaultReading());

		int count = 1;
		for (Button btn : list) {
			setPicture(ret, btn, count++);
		}

		ret.setButtons(list);

		return ret;

	}

	protected CenterRight getRandomCenterRight() {
		CenterRight ret = new CenterRight();
		ArrayList<Button> list = new ArrayList<Button>(buttonClickSource
				.getRandom4Reading());
		int position = 1;
		for (Button btn : list) {
			setPicture(ret, btn, position++);
		}
		ret.setButtons(list);
		ret.setTemplate("4");
		return ret;
	}

	protected CenterLeft getDefaultCenterLeft() {
		CenterLeft ret = new CenterLeft();
		ret.setTemplate("1");
		ArrayList<Button> list = new ArrayList<Button>(buttonClickSource
				.getDefaultShopping());
		// list.add(buttonClickSource.getShoppingButton("1"));
		// setPicture(ret, list.get(0), 1);
		ret.setButtons(list);
		return ret;
	}

	protected CenterLeft getRandomCenterLeft() {
		CenterLeft ret = new CenterLeft();
		ArrayList<Button> list = null;
		if (buttonClickSource.isShoppingHotterThanTraveling(null)) {
			list = new ArrayList<Button>(buttonClickSource.getRandom4Shopping());
		} else {
			list = new ArrayList<Button>(buttonClickSource
					.getRandom4Traveling());
		}
		int position = 1;
		for (Button btn : list) {
			setPicture(ret, btn, position++);
		}
		ret.setButtons(list);
		ret.setTemplate("4");
		return ret;
	}

	protected Top getDefaultTop() {
		Top ret = new Top();
		ret.setTemplate("1");
		ArrayList<Button> list = new ArrayList<Button>(buttonClickSource
				.getDefaultNews());
		// list.add(0,buttonClickSource.getNewsButton("1"));
		int count = 1;
		for (Button btn : list) {
			setPicture(ret, btn, count++);
		}
		ret.setButtons(list);
		return ret;
	}

	protected IPageArea getRandomTop() {
		IPageArea ret = new Top();
		ArrayList<Button> list = new ArrayList<Button>(buttonClickSource
				.getRandom4News());

		int position = 1;
		for (Button btn : list) {
			setPicture(ret, btn, position++);
		}
		ret.setButtons(list);
		ret.setTemplate("4");

		return ret;
	}

	protected Navigator getNavigator(String userId) {

		Navigator nav = new Navigator();

		IPageArea top = getPreferredTop(userId);
		if (top == null) {
			top = getRandomTop();
		}
		IPageArea left = getPreferredLeft(userId);
		if (left == null) {
			left = getRandomCenterLeft();
		}
		IPageArea right = getPreferredRight(userId);
		if (right == null) {
			right = getRandomCenterRight();
		}
		Bottom bottom = getPreferredBottom(userId);
		if (bottom == null) {
			bottom = getRandomBottom();
		}

		nav.setTop((Top) top);
		nav.setBottom(bottom);
		nav.setLeft((CenterLeft) left);
		nav.setRight((CenterRight) right);

		return nav;
	}

	public Navigator getNavigator(Map<String, String> params) {
		Navigator ret = null;
		String imei = params != null ? params.get("imei") : null;
		String imsi = params != null ? params.get("imsi") : null;

		ret = getNavigator(imei != null ? imei : imsi);

		return ret;
	}

	public void logClick(Map<String, String> clientParams, Long buttonId) {
		// try {
		// PreparedStatement pst = conn
		// .prepareStatement("insert into click (userid, buttonId, date) values (?,?,?)");
		// String imei = clientParams.get("imei");
		// String imsi = clientParams.get("imsi");
		// pst.setString(1, imei);
		// pst.setInt(2, buttonId);
		// pst.setLong(3, System.currentTimeMillis());
		// pst.executeUpdate();
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		buttonClickSource.logClick(clientParams, buttonId);
	}

	public IButtonSourceAdapter getButtonClickSource() {
		return buttonClickSource;
	}

	public void setButtonClickSource(IButtonSourceAdapter buttonClickSource) {
		this.buttonClickSource = buttonClickSource;
	}

	public Long getStaticsTimeLimit() {
		return staticsTimeLimit;
	}

	public void setStaticsTimeLimit(Long staticsTimeLimit) {
		this.staticsTimeLimit = staticsTimeLimit;
	}

}

class Node {
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getClazz() {
		return clazz;
	}

	public void setClazz(Integer clazz) {
		this.clazz = clazz;
	}

	public Integer getParentId() {
		return parentId;
	}

	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	public Node(Integer id, Integer clazz, Integer parentId, String title,
			String link) {
		super();
		this.id = id;
		this.clazz = clazz;
		this.parentId = parentId;
		this.title = title;
		this.link = link;
	}

	Integer id;
	Integer clazz;
	Integer parentId;
	String title;
	String link;
}
